---
#Optional Section
AWSTemplateFormatVersion: '2010-09-09' 

#Optional Section
#You can write a brief description to explain what this template will create.
Description: 'You can use this cloudformation template to create a VPC with 2 subnets in the same Availability Zone. This template will create a public and a private subnet. It will also create an IGW and a NAT g/w.'

#Optional Section
#This is like declaring variables which will be assigned external values. These values will be provided during the stack creation. For e.g.: If you want to assign a uniform code name like 'staging-vpc' you can accept that as a parameter and use that variable everywhere for name assignment. This template has such an example.
Parameters:
  CodeName:
    Type: String
    Default: 'my-prod-vpc'
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name


#Optional Section
#Mappings are similar to constants in a normal programming terminology. We can Assign values to mappings which can be consumed for various tasks in the template.
Mappings:
  VPCConfig:
    VPC:
      CIDR: 20.0.0.0/16
    #The highest CIDR block a VPC can have is using a /16 netmask and the smallest can be using a /28 netmask. Source: AWS Docs.
    PublicSubnet:
      CIDR: 20.0.0.0/24
    #CIDR Block of the public subnet
    PrivateSubnet:
      CIDR: 20.0.1.0/24
    #CIDR Block of the private subnet
  RouterConfig:
    InternalRoute:
      CIDR: 20.0.0.0/16
    GatewayRoute:
      CIDR: 0.0.0.0/0
    NATGatewayRoute:
      CIDR: 0.0.0.0/0

#Mandatory Section
#Resources section is used to actually define and create the resources. It is the only mandatory section of the template.
Resources:
########### VPC 
  VPC: #Logical ID: Just a normal name for identification.
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - VPCConfig
        - VPC
        - CIDR
      Tags: 
      - Key: Name
        Value: 'my-prod-vpc'
      - Key: Code
        Value:
          Ref: CodeName
########### Subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ1
      VpcId:
        Ref: VPC   #Reference to the VPC Created above
      CidrBlock:
        Fn::FindInMap:
        - VPCConfig
        - PublicSubnet
        - CIDR
      Tags: 
      - Key: Name
        Value: 'my-prod-public-subnet'
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ1
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - VPCConfig
        - PrivateSubnet
        - CIDR
      Tags: 
      - Key: Name
        Value: 'my-prod-private-subnet'
########### Gateways
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: 'my-prod-vpc-internet-gateway'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP
    Properties:
      AllocationId: 
        Fn::GetAtt:
          - ElasticIP
          - AllocationId
      SubnetId:
        Ref: PrivateSubnet
########### Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags: 
      - Key: Name
        Value: 'my-prod-vpc-public-routes'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags: 
      - Key: Name
        Value: 'my-prod-vpc-private-routes'
########### Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 
        Fn::FindInMap:
        - RouterConfig
        - GatewayRoute
        - CIDR
      GatewayId:
        Ref: InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 
        Fn::FindInMap:
        - RouterConfig
        - NATGatewayRoute
        - CIDR
      NatGatewayId:
        Ref: NATGateway

########### Route Association
  PublicSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

########### ACL Declaration
  PublicSubnetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 'my-prod-vpc-public-acl'

  PrivateSubnetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 'my-prod-vpc-private-acl'

########### Public ACL Routes
  InboundSSHPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '10'
      Protocol: '6'    #Protocol Number 6 = TCP. Ref IANA.ORG
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0 
      PortRange:
        From: '22'
        To: '22'
  InboundHTTPPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '11'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '12'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundEphemeralPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '20'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundSSHPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '10'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  OutboundHTTPPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '11'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutboundHTTPSPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '12'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutboundEphemeralPublicACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetACL
      RuleNumber: '20'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
########### Private Subnet Routes
  InboundSSHPrivateACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetACL
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 
        Fn::FindInMap:
          - VPCConfig
          - VPC       
          - CIDR
      PortRange:
        From: '22'
        To: '22'
  InboundHTTPPrivateACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetACL
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 
        Fn::FindInMap:
          - VPCConfig
          - VPC       
          - CIDR
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPrivateACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetACL
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 
        Fn::FindInMap:
          - VPCConfig
          - VPC       
          - CIDR
      PortRange:
        From: '443'
        To: '443'
  InboundEphemeralPrivateACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetACL
      RuleNumber: '110'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundEphemeralPrivateACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetACL
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

########### ACL - Subnet Association
  PublicSubnetACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: PublicSubnetACL
  PrivateSubnetACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      NetworkAclId:
        Ref: PrivateSubnetACL

#Optional Section
#Outputs return the resource attributes which are created by this templates. These attributes can be used during the creation of other resources. Nested stacks are a good example of such a scenario.
Outputs:
  VPCId:
    Value:
      Ref: VPC